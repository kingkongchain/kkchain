// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: p2p/chain/chain.proto

package chain

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"
import _ "github.com/gogo/protobuf/types"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Message_Type int32

const (
	Message_CHAIN_STATUS      Message_Type = 0
	Message_GET_BLOCK_BODIES  Message_Type = 1
	Message_BLOCKS_BODIES     Message_Type = 2
	Message_GET_BLOCK_HEADERS Message_Type = 3
	Message_BLOCK_HEADERS     Message_Type = 4
	Message_TRANSACTIONS      Message_Type = 5
	Message_GET_RECEIPTS      Message_Type = 6
	Message_RECEIPTS          Message_Type = 7
	Message_NEW_BLOCK_HASHS   Message_Type = 8
	Message_NEW_BLOCK         Message_Type = 9
)

var Message_Type_name = map[int32]string{
	0: "CHAIN_STATUS",
	1: "GET_BLOCK_BODIES",
	2: "BLOCKS_BODIES",
	3: "GET_BLOCK_HEADERS",
	4: "BLOCK_HEADERS",
	5: "TRANSACTIONS",
	6: "GET_RECEIPTS",
	7: "RECEIPTS",
	8: "NEW_BLOCK_HASHS",
	9: "NEW_BLOCK",
}
var Message_Type_value = map[string]int32{
	"CHAIN_STATUS":      0,
	"GET_BLOCK_BODIES":  1,
	"BLOCKS_BODIES":     2,
	"GET_BLOCK_HEADERS": 3,
	"BLOCK_HEADERS":     4,
	"TRANSACTIONS":      5,
	"GET_RECEIPTS":      6,
	"RECEIPTS":          7,
	"NEW_BLOCK_HASHS":   8,
	"NEW_BLOCK":         9,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}
func (Message_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_chain_3102603027309fe9, []int{3, 0}
}

type ChainStatusMsg struct {
	ChainID uint64 `protobuf:"varint,1,opt,name=chainID,proto3" json:"chainID,omitempty"`
	// local total difficult
	Td                   []byte   `protobuf:"bytes,2,opt,name=td,proto3" json:"td,omitempty"`
	CurrentBlockHash     []byte   `protobuf:"bytes,3,opt,name=currentBlockHash,proto3" json:"currentBlockHash,omitempty"`
	CurrentBlockNum      uint64   `protobuf:"varint,4,opt,name=currentBlockNum,proto3" json:"currentBlockNum,omitempty"`
	GenesisBlockHash     []byte   `protobuf:"bytes,5,opt,name=genesisBlockHash,proto3" json:"genesisBlockHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChainStatusMsg) Reset()      { *m = ChainStatusMsg{} }
func (*ChainStatusMsg) ProtoMessage() {}
func (*ChainStatusMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_chain_3102603027309fe9, []int{0}
}
func (m *ChainStatusMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainStatusMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainStatusMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ChainStatusMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainStatusMsg.Merge(dst, src)
}
func (m *ChainStatusMsg) XXX_Size() int {
	return m.Size()
}
func (m *ChainStatusMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainStatusMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ChainStatusMsg proto.InternalMessageInfo

func (m *ChainStatusMsg) GetChainID() uint64 {
	if m != nil {
		return m.ChainID
	}
	return 0
}

func (m *ChainStatusMsg) GetTd() []byte {
	if m != nil {
		return m.Td
	}
	return nil
}

func (m *ChainStatusMsg) GetCurrentBlockHash() []byte {
	if m != nil {
		return m.CurrentBlockHash
	}
	return nil
}

func (m *ChainStatusMsg) GetCurrentBlockNum() uint64 {
	if m != nil {
		return m.CurrentBlockNum
	}
	return 0
}

func (m *ChainStatusMsg) GetGenesisBlockHash() []byte {
	if m != nil {
		return m.GenesisBlockHash
	}
	return nil
}

type GetBlockHeadersMsg struct {
	StartNum             uint64   `protobuf:"varint,1,opt,name=startNum,proto3" json:"startNum,omitempty"`
	EndNum               uint64   `protobuf:"varint,2,opt,name=endNum,proto3" json:"endNum,omitempty"`
	SkipNum              []uint64 `protobuf:"varint,3,rep,packed,name=skipNum" json:"skipNum,omitempty"`
	Direction            bool     `protobuf:"varint,4,opt,name=direction,proto3" json:"direction,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBlockHeadersMsg) Reset()      { *m = GetBlockHeadersMsg{} }
func (*GetBlockHeadersMsg) ProtoMessage() {}
func (*GetBlockHeadersMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_chain_3102603027309fe9, []int{1}
}
func (m *GetBlockHeadersMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockHeadersMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockHeadersMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetBlockHeadersMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockHeadersMsg.Merge(dst, src)
}
func (m *GetBlockHeadersMsg) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockHeadersMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockHeadersMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockHeadersMsg proto.InternalMessageInfo

func (m *GetBlockHeadersMsg) GetStartNum() uint64 {
	if m != nil {
		return m.StartNum
	}
	return 0
}

func (m *GetBlockHeadersMsg) GetEndNum() uint64 {
	if m != nil {
		return m.EndNum
	}
	return 0
}

func (m *GetBlockHeadersMsg) GetSkipNum() []uint64 {
	if m != nil {
		return m.SkipNum
	}
	return nil
}

func (m *GetBlockHeadersMsg) GetDirection() bool {
	if m != nil {
		return m.Direction
	}
	return false
}

type DataMsg struct {
	Data                 [][]byte `protobuf:"bytes,1,rep,name=data" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataMsg) Reset()      { *m = DataMsg{} }
func (*DataMsg) ProtoMessage() {}
func (*DataMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_chain_3102603027309fe9, []int{2}
}
func (m *DataMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DataMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataMsg.Merge(dst, src)
}
func (m *DataMsg) XXX_Size() int {
	return m.Size()
}
func (m *DataMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_DataMsg.DiscardUnknown(m)
}

var xxx_messageInfo_DataMsg proto.InternalMessageInfo

func (m *DataMsg) GetData() [][]byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Message struct {
	// defines what type of message it is.
	Type Message_Type `protobuf:"varint,1,opt,name=type,proto3,enum=chain.Message_Type" json:"type,omitempty"`
	// message content
	ChainStatusMsg       *ChainStatusMsg     `protobuf:"bytes,2,opt,name=chainStatusMsg" json:"chainStatusMsg,omitempty"`
	GetBlockHeadersMsg   *GetBlockHeadersMsg `protobuf:"bytes,3,opt,name=getBlockHeadersMsg" json:"getBlockHeadersMsg,omitempty"`
	DataMsg              *DataMsg            `protobuf:"bytes,4,opt,name=dataMsg" json:"dataMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Message) Reset()      { *m = Message{} }
func (*Message) ProtoMessage() {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_chain_3102603027309fe9, []int{3}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetType() Message_Type {
	if m != nil {
		return m.Type
	}
	return Message_CHAIN_STATUS
}

func (m *Message) GetChainStatusMsg() *ChainStatusMsg {
	if m != nil {
		return m.ChainStatusMsg
	}
	return nil
}

func (m *Message) GetGetBlockHeadersMsg() *GetBlockHeadersMsg {
	if m != nil {
		return m.GetBlockHeadersMsg
	}
	return nil
}

func (m *Message) GetDataMsg() *DataMsg {
	if m != nil {
		return m.DataMsg
	}
	return nil
}

func init() {
	proto.RegisterType((*ChainStatusMsg)(nil), "chain.ChainStatusMsg")
	proto.RegisterType((*GetBlockHeadersMsg)(nil), "chain.GetBlockHeadersMsg")
	proto.RegisterType((*DataMsg)(nil), "chain.DataMsg")
	proto.RegisterType((*Message)(nil), "chain.Message")
	proto.RegisterEnum("chain.Message_Type", Message_Type_name, Message_Type_value)
}
func (this *ChainStatusMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ChainStatusMsg)
	if !ok {
		that2, ok := that.(ChainStatusMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ChainStatusMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ChainStatusMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ChainStatusMsg but is not nil && this == nil")
	}
	if this.ChainID != that1.ChainID {
		return fmt.Errorf("ChainID this(%v) Not Equal that(%v)", this.ChainID, that1.ChainID)
	}
	if !bytes.Equal(this.Td, that1.Td) {
		return fmt.Errorf("Td this(%v) Not Equal that(%v)", this.Td, that1.Td)
	}
	if !bytes.Equal(this.CurrentBlockHash, that1.CurrentBlockHash) {
		return fmt.Errorf("CurrentBlockHash this(%v) Not Equal that(%v)", this.CurrentBlockHash, that1.CurrentBlockHash)
	}
	if this.CurrentBlockNum != that1.CurrentBlockNum {
		return fmt.Errorf("CurrentBlockNum this(%v) Not Equal that(%v)", this.CurrentBlockNum, that1.CurrentBlockNum)
	}
	if !bytes.Equal(this.GenesisBlockHash, that1.GenesisBlockHash) {
		return fmt.Errorf("GenesisBlockHash this(%v) Not Equal that(%v)", this.GenesisBlockHash, that1.GenesisBlockHash)
	}
	return nil
}
func (this *ChainStatusMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChainStatusMsg)
	if !ok {
		that2, ok := that.(ChainStatusMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ChainID != that1.ChainID {
		return false
	}
	if !bytes.Equal(this.Td, that1.Td) {
		return false
	}
	if !bytes.Equal(this.CurrentBlockHash, that1.CurrentBlockHash) {
		return false
	}
	if this.CurrentBlockNum != that1.CurrentBlockNum {
		return false
	}
	if !bytes.Equal(this.GenesisBlockHash, that1.GenesisBlockHash) {
		return false
	}
	return true
}
func (this *GetBlockHeadersMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetBlockHeadersMsg)
	if !ok {
		that2, ok := that.(GetBlockHeadersMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetBlockHeadersMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetBlockHeadersMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetBlockHeadersMsg but is not nil && this == nil")
	}
	if this.StartNum != that1.StartNum {
		return fmt.Errorf("StartNum this(%v) Not Equal that(%v)", this.StartNum, that1.StartNum)
	}
	if this.EndNum != that1.EndNum {
		return fmt.Errorf("EndNum this(%v) Not Equal that(%v)", this.EndNum, that1.EndNum)
	}
	if len(this.SkipNum) != len(that1.SkipNum) {
		return fmt.Errorf("SkipNum this(%v) Not Equal that(%v)", len(this.SkipNum), len(that1.SkipNum))
	}
	for i := range this.SkipNum {
		if this.SkipNum[i] != that1.SkipNum[i] {
			return fmt.Errorf("SkipNum this[%v](%v) Not Equal that[%v](%v)", i, this.SkipNum[i], i, that1.SkipNum[i])
		}
	}
	if this.Direction != that1.Direction {
		return fmt.Errorf("Direction this(%v) Not Equal that(%v)", this.Direction, that1.Direction)
	}
	return nil
}
func (this *GetBlockHeadersMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetBlockHeadersMsg)
	if !ok {
		that2, ok := that.(GetBlockHeadersMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StartNum != that1.StartNum {
		return false
	}
	if this.EndNum != that1.EndNum {
		return false
	}
	if len(this.SkipNum) != len(that1.SkipNum) {
		return false
	}
	for i := range this.SkipNum {
		if this.SkipNum[i] != that1.SkipNum[i] {
			return false
		}
	}
	if this.Direction != that1.Direction {
		return false
	}
	return true
}
func (this *DataMsg) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DataMsg)
	if !ok {
		that2, ok := that.(DataMsg)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DataMsg")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DataMsg but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DataMsg but is not nil && this == nil")
	}
	if len(this.Data) != len(that1.Data) {
		return fmt.Errorf("Data this(%v) Not Equal that(%v)", len(this.Data), len(that1.Data))
	}
	for i := range this.Data {
		if !bytes.Equal(this.Data[i], that1.Data[i]) {
			return fmt.Errorf("Data this[%v](%v) Not Equal that[%v](%v)", i, this.Data[i], i, that1.Data[i])
		}
	}
	return nil
}
func (this *DataMsg) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataMsg)
	if !ok {
		that2, ok := that.(DataMsg)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Data) != len(that1.Data) {
		return false
	}
	for i := range this.Data {
		if !bytes.Equal(this.Data[i], that1.Data[i]) {
			return false
		}
	}
	return true
}
func (this *Message) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Message")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Message but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Message but is not nil && this == nil")
	}
	if this.Type != that1.Type {
		return fmt.Errorf("Type this(%v) Not Equal that(%v)", this.Type, that1.Type)
	}
	if !this.ChainStatusMsg.Equal(that1.ChainStatusMsg) {
		return fmt.Errorf("ChainStatusMsg this(%v) Not Equal that(%v)", this.ChainStatusMsg, that1.ChainStatusMsg)
	}
	if !this.GetBlockHeadersMsg.Equal(that1.GetBlockHeadersMsg) {
		return fmt.Errorf("GetBlockHeadersMsg this(%v) Not Equal that(%v)", this.GetBlockHeadersMsg, that1.GetBlockHeadersMsg)
	}
	if !this.DataMsg.Equal(that1.DataMsg) {
		return fmt.Errorf("DataMsg this(%v) Not Equal that(%v)", this.DataMsg, that1.DataMsg)
	}
	return nil
}
func (this *Message) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Message)
	if !ok {
		that2, ok := that.(Message)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !this.ChainStatusMsg.Equal(that1.ChainStatusMsg) {
		return false
	}
	if !this.GetBlockHeadersMsg.Equal(that1.GetBlockHeadersMsg) {
		return false
	}
	if !this.DataMsg.Equal(that1.DataMsg) {
		return false
	}
	return true
}
func (this *ChainStatusMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&chain.ChainStatusMsg{")
	s = append(s, "ChainID: "+fmt.Sprintf("%#v", this.ChainID)+",\n")
	s = append(s, "Td: "+fmt.Sprintf("%#v", this.Td)+",\n")
	s = append(s, "CurrentBlockHash: "+fmt.Sprintf("%#v", this.CurrentBlockHash)+",\n")
	s = append(s, "CurrentBlockNum: "+fmt.Sprintf("%#v", this.CurrentBlockNum)+",\n")
	s = append(s, "GenesisBlockHash: "+fmt.Sprintf("%#v", this.GenesisBlockHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetBlockHeadersMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chain.GetBlockHeadersMsg{")
	s = append(s, "StartNum: "+fmt.Sprintf("%#v", this.StartNum)+",\n")
	s = append(s, "EndNum: "+fmt.Sprintf("%#v", this.EndNum)+",\n")
	s = append(s, "SkipNum: "+fmt.Sprintf("%#v", this.SkipNum)+",\n")
	s = append(s, "Direction: "+fmt.Sprintf("%#v", this.Direction)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DataMsg) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&chain.DataMsg{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Message) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&chain.Message{")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	if this.ChainStatusMsg != nil {
		s = append(s, "ChainStatusMsg: "+fmt.Sprintf("%#v", this.ChainStatusMsg)+",\n")
	}
	if this.GetBlockHeadersMsg != nil {
		s = append(s, "GetBlockHeadersMsg: "+fmt.Sprintf("%#v", this.GetBlockHeadersMsg)+",\n")
	}
	if this.DataMsg != nil {
		s = append(s, "DataMsg: "+fmt.Sprintf("%#v", this.DataMsg)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringChain(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *ChainStatusMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainStatusMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ChainID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChain(dAtA, i, uint64(m.ChainID))
	}
	if len(m.Td) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChain(dAtA, i, uint64(len(m.Td)))
		i += copy(dAtA[i:], m.Td)
	}
	if len(m.CurrentBlockHash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChain(dAtA, i, uint64(len(m.CurrentBlockHash)))
		i += copy(dAtA[i:], m.CurrentBlockHash)
	}
	if m.CurrentBlockNum != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintChain(dAtA, i, uint64(m.CurrentBlockNum))
	}
	if len(m.GenesisBlockHash) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintChain(dAtA, i, uint64(len(m.GenesisBlockHash)))
		i += copy(dAtA[i:], m.GenesisBlockHash)
	}
	return i, nil
}

func (m *GetBlockHeadersMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockHeadersMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StartNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChain(dAtA, i, uint64(m.StartNum))
	}
	if m.EndNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintChain(dAtA, i, uint64(m.EndNum))
	}
	if len(m.SkipNum) > 0 {
		dAtA2 := make([]byte, len(m.SkipNum)*10)
		var j1 int
		for _, num := range m.SkipNum {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChain(dAtA, i, uint64(j1))
		i += copy(dAtA[i:], dAtA2[:j1])
	}
	if m.Direction {
		dAtA[i] = 0x20
		i++
		if m.Direction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *DataMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			dAtA[i] = 0xa
			i++
			i = encodeVarintChain(dAtA, i, uint64(len(b)))
			i += copy(dAtA[i:], b)
		}
	}
	return i, nil
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintChain(dAtA, i, uint64(m.Type))
	}
	if m.ChainStatusMsg != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintChain(dAtA, i, uint64(m.ChainStatusMsg.Size()))
		n3, err := m.ChainStatusMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if m.GetBlockHeadersMsg != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintChain(dAtA, i, uint64(m.GetBlockHeadersMsg.Size()))
		n4, err := m.GetBlockHeadersMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if m.DataMsg != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintChain(dAtA, i, uint64(m.DataMsg.Size()))
		n5, err := m.DataMsg.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	return i, nil
}

func encodeVarintChain(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ChainStatusMsg) Size() (n int) {
	var l int
	_ = l
	if m.ChainID != 0 {
		n += 1 + sovChain(uint64(m.ChainID))
	}
	l = len(m.Td)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	l = len(m.CurrentBlockHash)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	if m.CurrentBlockNum != 0 {
		n += 1 + sovChain(uint64(m.CurrentBlockNum))
	}
	l = len(m.GenesisBlockHash)
	if l > 0 {
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}

func (m *GetBlockHeadersMsg) Size() (n int) {
	var l int
	_ = l
	if m.StartNum != 0 {
		n += 1 + sovChain(uint64(m.StartNum))
	}
	if m.EndNum != 0 {
		n += 1 + sovChain(uint64(m.EndNum))
	}
	if len(m.SkipNum) > 0 {
		l = 0
		for _, e := range m.SkipNum {
			l += sovChain(uint64(e))
		}
		n += 1 + sovChain(uint64(l)) + l
	}
	if m.Direction {
		n += 2
	}
	return n
}

func (m *DataMsg) Size() (n int) {
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, b := range m.Data {
			l = len(b)
			n += 1 + l + sovChain(uint64(l))
		}
	}
	return n
}

func (m *Message) Size() (n int) {
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovChain(uint64(m.Type))
	}
	if m.ChainStatusMsg != nil {
		l = m.ChainStatusMsg.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	if m.GetBlockHeadersMsg != nil {
		l = m.GetBlockHeadersMsg.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	if m.DataMsg != nil {
		l = m.DataMsg.Size()
		n += 1 + l + sovChain(uint64(l))
	}
	return n
}

func sovChain(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozChain(x uint64) (n int) {
	return sovChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ChainStatusMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ChainStatusMsg{`,
		`ChainID:` + fmt.Sprintf("%v", this.ChainID) + `,`,
		`Td:` + fmt.Sprintf("%v", this.Td) + `,`,
		`CurrentBlockHash:` + fmt.Sprintf("%v", this.CurrentBlockHash) + `,`,
		`CurrentBlockNum:` + fmt.Sprintf("%v", this.CurrentBlockNum) + `,`,
		`GenesisBlockHash:` + fmt.Sprintf("%v", this.GenesisBlockHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetBlockHeadersMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetBlockHeadersMsg{`,
		`StartNum:` + fmt.Sprintf("%v", this.StartNum) + `,`,
		`EndNum:` + fmt.Sprintf("%v", this.EndNum) + `,`,
		`SkipNum:` + fmt.Sprintf("%v", this.SkipNum) + `,`,
		`Direction:` + fmt.Sprintf("%v", this.Direction) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DataMsg) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DataMsg{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Message) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Message{`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`ChainStatusMsg:` + strings.Replace(fmt.Sprintf("%v", this.ChainStatusMsg), "ChainStatusMsg", "ChainStatusMsg", 1) + `,`,
		`GetBlockHeadersMsg:` + strings.Replace(fmt.Sprintf("%v", this.GetBlockHeadersMsg), "GetBlockHeadersMsg", "GetBlockHeadersMsg", 1) + `,`,
		`DataMsg:` + strings.Replace(fmt.Sprintf("%v", this.DataMsg), "DataMsg", "DataMsg", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringChain(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ChainStatusMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainStatusMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainStatusMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			m.ChainID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainID |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Td", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Td = append(m.Td[:0], dAtA[iNdEx:postIndex]...)
			if m.Td == nil {
				m.Td = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentBlockHash = append(m.CurrentBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CurrentBlockHash == nil {
				m.CurrentBlockHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentBlockNum", wireType)
			}
			m.CurrentBlockNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentBlockNum |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenesisBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenesisBlockHash = append(m.GenesisBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.GenesisBlockHash == nil {
				m.GenesisBlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetBlockHeadersMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockHeadersMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockHeadersMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartNum", wireType)
			}
			m.StartNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartNum |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndNum", wireType)
			}
			m.EndNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndNum |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SkipNum = append(m.SkipNum, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChain
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthChain
				}
				postIndex := iNdEx + packedLen
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChain
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SkipNum = append(m.SkipNum, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipNum", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Direction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Direction = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, make([]byte, postIndex-iNdEx))
			copy(m.Data[len(m.Data)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Message_Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainStatusMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainStatusMsg == nil {
				m.ChainStatusMsg = &ChainStatusMsg{}
			}
			if err := m.ChainStatusMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetBlockHeadersMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GetBlockHeadersMsg == nil {
				m.GetBlockHeadersMsg = &GetBlockHeadersMsg{}
			}
			if err := m.GetBlockHeadersMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChain
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataMsg == nil {
				m.DataMsg = &DataMsg{}
			}
			if err := m.DataMsg.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthChain
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowChain
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipChain(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthChain = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChain   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("p2p/chain/chain.proto", fileDescriptor_chain_3102603027309fe9) }

var fileDescriptor_chain_3102603027309fe9 = []byte{
	// 574 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x53, 0x41, 0x6e, 0xda, 0x40,
	0x14, 0xcd, 0x60, 0x27, 0x90, 0x1f, 0x42, 0x9c, 0x49, 0x53, 0x39, 0x51, 0x6b, 0x51, 0x6f, 0x8a,
	0xba, 0x70, 0x24, 0xba, 0xee, 0xc2, 0x80, 0x15, 0xac, 0x34, 0x80, 0x6c, 0x57, 0x59, 0xa2, 0x09,
	0x9e, 0x1a, 0x8b, 0xd4, 0xb6, 0xec, 0xa1, 0x12, 0xbb, 0x1c, 0xa1, 0xc7, 0xa8, 0x7a, 0x86, 0x6e,
	0xba, 0xeb, 0xb2, 0xcb, 0x2e, 0x03, 0xbd, 0x40, 0x8f, 0x50, 0xcd, 0xd8, 0x40, 0x02, 0xdd, 0x58,
	0xf3, 0xde, 0x7f, 0xff, 0xfd, 0x79, 0xf3, 0x65, 0x38, 0x4d, 0x9a, 0xc9, 0xc5, 0x68, 0x4c, 0xc2,
	0x28, 0xff, 0x1a, 0x49, 0x1a, 0xb3, 0x18, 0xef, 0x0a, 0x70, 0x7e, 0x16, 0xc4, 0x71, 0x70, 0x47,
	0x2f, 0x04, 0x79, 0x3b, 0xfd, 0x78, 0x41, 0xa2, 0x59, 0xae, 0x38, 0xd7, 0x83, 0x38, 0x88, 0xd7,
	0x05, 0x8e, 0x04, 0x10, 0xa7, 0x5c, 0xa3, 0x7f, 0x47, 0x50, 0x6b, 0x73, 0x23, 0x97, 0x11, 0x36,
	0xcd, 0xae, 0xb3, 0x00, 0xab, 0x50, 0x16, 0xd6, 0x76, 0x47, 0x45, 0x75, 0xd4, 0x90, 0x9d, 0x25,
	0xc4, 0x35, 0x28, 0x31, 0x5f, 0x2d, 0xd5, 0x51, 0xa3, 0xea, 0x94, 0x98, 0x8f, 0xdf, 0x80, 0x32,
	0x9a, 0xa6, 0x29, 0x8d, 0x58, 0xeb, 0x2e, 0x1e, 0x4d, 0xba, 0x24, 0x1b, 0xab, 0x92, 0xa8, 0x6e,
	0xf1, 0xb8, 0x01, 0x47, 0x8f, 0xb9, 0xde, 0xf4, 0x93, 0x2a, 0x0b, 0xf7, 0x4d, 0x9a, 0xbb, 0x06,
	0x34, 0xa2, 0x59, 0x98, 0xad, 0x5d, 0x77, 0x73, 0xd7, 0x4d, 0x5e, 0xbf, 0x47, 0x80, 0x2f, 0x69,
	0x31, 0x86, 0x12, 0x9f, 0xa6, 0x22, 0xc2, 0x39, 0x54, 0x32, 0x46, 0x52, 0xc6, 0xa7, 0xe4, 0x19,
	0x56, 0x18, 0x3f, 0x87, 0x3d, 0x1a, 0xf9, 0xbc, 0x52, 0x12, 0x95, 0x02, 0xf1, 0xd8, 0xd9, 0x24,
	0x4c, 0x78, 0x41, 0xaa, 0x4b, 0x3c, 0x76, 0x01, 0xf1, 0x0b, 0xd8, 0xf7, 0xc3, 0x94, 0x8e, 0x58,
	0x18, 0x47, 0xe2, 0xd2, 0x15, 0x67, 0x4d, 0xe8, 0x2f, 0xa1, 0xdc, 0x21, 0x8c, 0xf0, 0xb1, 0x18,
	0x64, 0x9f, 0x30, 0xa2, 0xa2, 0xba, 0xd4, 0xa8, 0x3a, 0xe2, 0xac, 0x7f, 0x93, 0xa0, 0x7c, 0x4d,
	0xb3, 0x8c, 0x04, 0x14, 0xbf, 0x06, 0x99, 0xcd, 0x12, 0x2a, 0xae, 0x54, 0x6b, 0x9e, 0x18, 0xf9,
	0x3a, 0x8b, 0xaa, 0xe1, 0xcd, 0x12, 0xea, 0x08, 0x01, 0x7e, 0x07, 0xb5, 0xd1, 0x93, 0xa5, 0x88,
	0xbb, 0x1e, 0x34, 0x4f, 0x8b, 0x96, 0xa7, 0x1b, 0x73, 0x36, 0xc4, 0xd8, 0x06, 0x1c, 0x6c, 0x3d,
	0x8a, 0xd8, 0xcc, 0x41, 0xf3, 0xac, 0xb0, 0xd8, 0x7e, 0x35, 0xe7, 0x3f, 0x4d, 0xb8, 0x01, 0x65,
	0x3f, 0x4f, 0x27, 0x92, 0x1f, 0x34, 0x6b, 0x45, 0x7f, 0x91, 0xd9, 0x59, 0x96, 0xf5, 0x1f, 0x08,
	0x64, 0x1e, 0x01, 0x2b, 0x50, 0x6d, 0x77, 0x4d, 0xbb, 0x37, 0x74, 0x3d, 0xd3, 0xfb, 0xe0, 0x2a,
	0x3b, 0xf8, 0x19, 0x28, 0x97, 0x96, 0x37, 0x6c, 0xbd, 0xef, 0xb7, 0xaf, 0x86, 0xad, 0x7e, 0xc7,
	0xb6, 0x5c, 0x05, 0xe1, 0x63, 0x38, 0x14, 0x8c, 0xbb, 0xa4, 0x4a, 0xf8, 0x14, 0x8e, 0xd7, 0xc2,
	0xae, 0x65, 0x76, 0x2c, 0xc7, 0x55, 0xa4, 0x95, 0x72, 0x45, 0xc9, 0x7c, 0x88, 0xe7, 0x98, 0x3d,
	0xd7, 0x6c, 0x7b, 0x76, 0xbf, 0xe7, 0x2a, 0xbb, 0x9c, 0xe1, 0xbd, 0x8e, 0xd5, 0xb6, 0xec, 0x81,
	0xe7, 0x2a, 0x7b, 0xb8, 0x0a, 0x95, 0x15, 0x2a, 0xe3, 0x13, 0x38, 0xea, 0x59, 0x37, 0x4b, 0x6f,
	0xd3, 0xed, 0xba, 0x4a, 0x05, 0x1f, 0xc2, 0xfe, 0x8a, 0x54, 0xf6, 0x5b, 0x37, 0xbf, 0xe7, 0xda,
	0xce, 0xc3, 0x5c, 0x43, 0x7f, 0xe7, 0x1a, 0xba, 0x5f, 0x68, 0xe8, 0xeb, 0x42, 0x43, 0x3f, 0x17,
	0x1a, 0xfa, 0xb5, 0xd0, 0xd0, 0xc3, 0x42, 0x43, 0x5f, 0xfe, 0x68, 0x3b, 0xf0, 0x2a, 0x4e, 0x03,
	0x23, 0x8c, 0x3e, 0x87, 0x91, 0x31, 0x99, 0x3c, 0xfa, 0x25, 0x8d, 0x31, 0x89, 0xfc, 0x6c, 0x4c,
	0x26, 0xb4, 0x55, 0xbd, 0xba, 0x12, 0x3b, 0x1a, 0x70, 0x7e, 0x80, 0x6e, 0xf7, 0x84, 0xe0, 0xed,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x45, 0x1f, 0x4b, 0xd9, 0xcc, 0x03, 0x00, 0x00,
}
